package com.srimantha.fizzbuzz;

import org.springframework.stereotype.Component;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.IntFunction;
import java.util.stream.IntStream;


/**
 * Coverts an integer  stream to a map  where the key is the integer in the stream represented as a string
 * and the value, a string generated by the use the method getFizzBuzzList
 *
 **/
@Component
public abstract class FizzBuzz {
    class Entry {
        String key;
        String value;
        public Entry(String key, String value){
            this.key = key;
            this.value = value;
        }

        @Override
        public String toString() {
            return "Entry{" +
                    "key='" + key + '\'' +
                    ", value='" + value + '\'' +
                    '}';
        }
    }

    /**
     * Template method that converts an input stream of integers into map of
     * where the key is the integer in the stream represented as a string
     * and the value, a string generated by the use the method getEntryIntFunction
     * @param start - start of the input stream
     * @param end - end of the input stream
     * @return a map where the key is the integer in the stream represented as a string
     * and the value, a string generated by the use the method getEntryIntFunction
     */
    public Map<String, String> getFizzBuzzList(int start, int end) {
        if(start<0 || end < 0 || start > end){
            throw new IllegalArgumentException(String.format("Illegal Arguments supplied for start=%d or end=%d", start, end));
        }
        Map<String, String> map = new LinkedHashMap<String, String>();
        IntStream.rangeClosed(start, end).mapToObj(getEntryIntFunction()).forEach(x -> map.put(x.key, x.value));
        return map;
    }

    abstract IntFunction<Entry> getEntryIntFunction();
}
